package Modul4praktika;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Zadanie2 {


    public static void main(String[] args) {

        /*
        Задача 2
        Исправьте ошибку в шаблоне регулярного выражения. Код должен выводить все слова, начинающиеся на букву «с» без учёта регистра.
         */
        String text = "У Сени и Сани в сенях сом с усами";
        Pattern pattern = Pattern.compile("\\b[сС][а-я]+\\b");
        /*
        РАСШИФРОВКА ШАБЛОНА:
        \\d границы слова
        [cC] любой из перечисленных символов без учета регистра
        [а-я] любой из перечисленных символов с учетом регистра (регистр - строковые символы)
        + количество символов 1 или более
        \\b границы слова
         */
        Matcher matcher = pattern.matcher(text);

        while (matcher.find()) {
            //System.out.println(text.substring(matcher.start(), matcher.end()));
        }
        /*
        Задача 4
        Нам требуется вывести латинский текст без учета регистра. В нем допущены ошибки.
        Требуется регулярным выражением проверить текст и вывести на экран.
         */
        //String stringTest = "[a-zA-Z]";
        String txt = "1It is 2interesting TO 4study VERY666, Делайте обучение интересней";
        Pattern pattern1 = Pattern.compile("[a-zA-Z]+");
        Matcher matcher1 = pattern1.matcher(txt);
        while (matcher1.find()) {//цикл пока поиск класса совпадения - истина
            //System.out.print(matcher1.group());//вывод такой же как и в задании №2
        }
        /*
        Задача 5
        Представьте, что вы работаете разработчиком в Телеком-компании, и вам досталась задача, согласно
        которой вам необходимо разработать функционал по поиску определенных ошибок в многочисленных файлах,
        которые хранят логи по всем транзакциям.
        Напишите код, который должен найти и вывести на консоль все ошибки в тексте:
         */
        String txt1 = "WrongMsisdnError SuccessfulTransaction TimeOutError InternalError SuccessfulTransaction " +
                "ExternalIDError SuccessfulTransaction WrongIDError InvalidArgumentError SuccessfulTransaction" +
                " SuccessfulTransaction SuccessfulTransaction WrongMsisdnError";
        Pattern pattern2 = Pattern.compile("\\b[a-zA-Z]+Error\\b");//создаем шаблон (что ищем)
        Matcher matcher2 = pattern2.matcher(txt1);//создаем сравнение и газружаем текст (где ищем)
        while (matcher2.find()) {//создаем цикл сравнения
            //System.out.println(matcher2.group());//выводим в консоль результат поиска
        }
        /*
        Задача 6
        Выполните поиск по тексту и выведите в качестве результата предложение, содержащее выбранное слово. Например, найдие
        предложения, содержащие слово «друг» в стихотворении С. А. Есенина «До свиданья, друг мой, до свиданья».
         */
        String txt2 = "До свиданья, друг мой, до свиданья. Милый мой, ты у меня в груди. " +
                "Предназначенное расставанье Обещает встречу впереди. До свиданья, друг мой, без руки, без слова, " +
                "Не грусти и не печаль бровей, — В этой жизни умирать не ново, Но и жить, конечно, не новей.";

        Pattern pattern3 = Pattern.compile("[^.!?]*(друг)[^.!?]*[.!?]");
        /*
        РАСШИФРОВКА РЕГУЛЯРКИ:
        [^.!?] - любой символ кроме перечисленных
        * - количество символов - 0 и более
        (друг) - скобки группировка найденного текста
         */
        Matcher matcher3 = pattern3.matcher(txt2);
        while (matcher3.find()) {
            //System.out.println(matcher3.group());
        }
        /*
        Задача 9
        Написать код с использованием регулярных выражений для извлечения IP из строки данных:
        SW Eltex MES1124 УД АТС-66 388-22-66-СОШ №1 MES-1124 (172.16.16.93):03 /nSW D-Link DES-1210-28/ME
        УД АТС-45 МБОУ DES-1210-28 (172.16.252.170) /nSW D-Link DES-1210-28/ME 385-4 Бийск ПСЭ-32/2 32/2-106/5(ОКН)
        DES-1210-28(ОКН) (10.50.140.206):02 /nкрс 2036 35 (1) штк СТШ2036-001 d2036-3(10.54.20.124) 0/0
        Вывести найденные IP-адреса в консоль в виде:
        172.16.16.93
        172.16.252.170
        10.50.140.206
        10.54.20.124
         */
        String txt3 = "SW Eltex MES1124 УД АТС-66 388-22-66-СОШ №1 MES-1124 (172.16.16.93):03 /nSW D-Link DES-1210-28/ME" +
                " УД АТС-45 МБОУ DES-1210-28 (172.16.252.170) /nSW D-Link DES-1210-28/ME 385-4 Бийск ПСЭ-32/2 32/2-106/5(ОКН)" +
                " DES-1210-28(ОКН) (10.50.140.206):02 /nкрс 2036 35 (1) штк СТШ2036-001 d2036-3(10.54.20.124) 0/0";
        Pattern pattern4 = Pattern.compile("\\b\\d{2,3}[.]\\d{2}[.]\\d{2,3}[.]\\d{2,3}\\b");//мое решение
        Pattern pattern5 = Pattern.compile("([0-9]{1,3}[\\.]){3}[0-9]{2,3}");//предлагаемое решение ([0-9]{1,3}[\.]){3}[0-9]{1,3}
        /*
        РАСШИФРОВКА ЛЕГУЛЯРКИ
        ( - группировка
        [0-9]{1,3} - все симводы от 0 до 9 - в количестве от 1 до 3
        [\\.] - обращаем символ "." в обычный символ
        ) - закрываем группу
        {3} - указанная выше группа должна повторяться 3 раза
        [0-9]{1,3} - все симводы от 0 до 9 - в количестве от 1 до 3
         */
        Matcher matcher4 = pattern4.matcher(txt3);
        Matcher matcher5 = pattern5.matcher(txt3);
        while (matcher4.find() && matcher5.find()){
            //System.out.println(matcher4.group());
            //System.out.println(matcher5.group());
        }
        /*
        Задача 10
        Лена захотела купить породистого щенка и назвать его оригинально, но питомник, который продает этих щенков,
        предупредил, что кличка собаки должна обязательно начинаться на букву «Л» и быть из определенного списка.
        Помогите Лене при помощи регулярного выражения найти все имена собак на букву «Л» из предложенного списка:
        */
        String txt4 = "Рекс Лорд Лом Шарик Бобик Шалун";
        Pattern pattern6 = Pattern.compile("\\bЛ[а-я]+\\b");//мое решение - такое же как предложженное
        Matcher matcher6 = pattern6.matcher(txt4);
        while (matcher6.find()){
            System.out.println(matcher6.group());
        }

    }

}

